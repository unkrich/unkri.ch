/**
 * Plugin to autolink references like in GitHub issues, PRs, and comments.
 *
 * @type {import('unified').Plugin<[Options?]|void[], Root>}
 */
export default function remarkGithub(
  options?: void | Options | undefined
):
  | void
  | import('unified').Transformer<import('mdast').Root, import('mdast').Root>
export type Root = import('mdast').Root
export type StaticPhrasingContent = import('mdast').StaticPhrasingContent
export type ReplaceFunction =
  import('mdast-util-find-and-replace').ReplaceFunction
export type Match = {
  input: string
  index: number
}
export type DefaultBuildUrl = (values: BuildUrlValues) => string
export type BuildUrl = (
  values: BuildUrlValues,
  defaultBuildUrl: DefaultBuildUrl
) => string | false
export type BuildUrlValues =
  | BuildUrlCommitValues
  | BuildUrlCompareValues
  | BuildUrlIssueValues
  | BuildUrlMentionValues
/**
 * Arguments for buildUrl functions for commit hash
 */
export type BuildUrlCommitValues = {
  /**
   * The type of special object
   */
  type: 'commit'
  /**
   * The owner of the repo
   */
  user: string
  /**
   * The project of the repo
   */
  project: string
  /**
   * The commit hash value
   */
  hash: string
}
/**
 * Arguments for buildUrl functions for commit hash ranges
 */
export type BuildUrlCompareValues = {
  /**
   * The type of special object
   */
  type: 'compare'
  /**
   * The owner of the repo
   */
  user: string
  /**
   * The project of the repo
   */
  project: string
  /**
   * The SHA of the range start
   */
  base: string
  /**
   * The SHA of the range end
   */
  compare: string
}
/**
 * Arguments for buildUrl functions for issues
 */
export type BuildUrlIssueValues = {
  /**
   * The type of special object
   */
  type: 'issue'
  /**
   * The owner of the repo
   */
  user: string
  /**
   * The project of the repo
   */
  project: string
  /**
   * The parsed issue number
   */
  no: string
}
/**
 * Arguments for buildUrl functions for mentions
 */
export type BuildUrlMentionValues = {
  /**
   * The type of special object
   */
  type: 'mention'
  /**
   * The parsed user name
   */
  user: string
}
/**
 * The owner and project of the repo
 */
export type RepositoryInfo = {
  /**
   * The user/organization name
   */
  user: string
  /**
   * The project/repo name
   */
  project: string
}
/**
 * Configuration.
 */
export type Options = {
  /**
   * Repository to link against.
   * Detected from the `repository` field in `package.json` if not given.
   * Should point to a GitHub repository.
   */
  repository?: string | undefined
  /**
   * Wrap mentions in `strong`.
   * This makes them render more like how GitHub styles them.
   * But GitHub itself uses CSS instead of strong.
   */
  mentionStrong?: boolean | undefined
  /**
   * Change how (and whether) things are linked.
   */
  buildUrl?: BuildUrl | undefined
}
